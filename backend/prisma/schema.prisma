// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems   Problem[]
  submission Submission[]

  ProblemSolved ProblemSolved[]
}

model Problem {
  id          String     @id @default(uuid())
  tittle      String
  description String
  diificulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String
  editorail   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission[]
  ProblemSolved ProblemSolved[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  souceCode     Json
  langauge      String
  stdin         String?
  stdout        String?
  stdderr       String?
  complieOutput String?
  status        String //Accepted ,wrong answer depnds upon the test cases 
  memory        String?
  time          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem       Problem         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemSolved ProblemSolved[]

  TestCaseResult TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testcase      Int
  passed        Boolean
  stdout        String?
  expected      String?
  stderr        String?
  complieOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId]) //for better search 
}

//model name always in camel case
//if the data is in problem solved then it should have all the follwoing fields

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem      Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  Submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?

  @@unique([userId, problemId])
}
